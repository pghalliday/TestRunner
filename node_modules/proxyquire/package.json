{
  "name": "proxyquire",
  "version": "0.3.2",
  "description": "Proxies nodejs require in order to allow overriding dependencies during testing.",
  "main": "proxyquire.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/thlorenz/proxyquire.git"
  },
  "keywords": [
    "require",
    "dependency",
    "test",
    "mock",
    "stub"
  ],
  "author": {
    "name": "Thorsten Lorenz"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "devDependencies": {
    "mocha": "1.3.x",
    "should": "0.6.x",
    "sinon": "~1.4.2"
  },
  "readme": "# proxyquire [![Build Status](https://secure.travis-ci.org/thlorenz/proxyquire.png)](http://travis-ci.org/thlorenz/proxyquire)\n\nProxies nodejs's require in order to make overriding dependencies during testing easy while staying **totally unobstrusive**.\n\n# Features\n\n- **no changes to your code** are necessary \n- non overriden methods of a module behave like the original\n- mocking framework agnostic, if it can stub a function then it works with proxyquire\n- \"use strict\" compliant\n\n# Example\n\n**foo.js:**\n\n```javascript\nvar path = require('path');\n\nmodule.exports.extnameAllCaps = function (file) { \n  return path.extname(file).toUpperCase();\n};\n\nmodule.exports.basenameAllCaps = function (file) { \n  return path.basename(file).toUpperCase();\n};\n```\n\n**foo.test.js:**\n\n```javascript\nvar proxyquire =  require('proxyquire')\n  , assert     =  require('assert')\n  , pathStub   =  { };\n\n// when no overrides are specified, path.extname behaves normally\nvar foo = proxyquire.resolve('./foo', __dirname, { 'path': pathStub });\nassert.equal(foo.extnameAllCaps('file.txt'), '.TXT');\n\n// override path.extname\npathStub.extname = function (file) { return 'Exterminate, exterminate the ' + file; };\n\n// path.extname now behaves as we told it to\nassert.equal(foo.extnameAllCaps('file.txt'), 'EXTERMINATE, EXTERMINATE THE FILE.TXT');\n\n// path.basename and all other path module methods still function as before\nassert.equal(foo.basenameAllCaps('/a/b/file.txt'), 'FILE.TXT');\n```\n\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\n\n- [Usage](#usage)\n- [API](#api)\n\t- [Resolve module to be tested and configure stubs](#resolve-module-to-be-tested-and-configure-stubs)\n    - [Preventing call thru to original dependency](#preventing-call-thru-to-original-dependency)\n\t- [Changing the TmpDir](#changing-the-tmpdir)\n    - [Examples](#examples)\n- [More Examples](#more-examples)\n\n\n# Usage\n\nTwo simple steps to override require in your tests:\n\n- add `var proxyquire = require('proxyquire');` to top level of your test file\n- `proxyquire.resolve(...)` the module you want to test and pass along stubs for modules you want to override\n\n# API\n\n## Resolve module to be tested and configure stubs\n\n***proxyquire.resolve({string} mdl, {string} test__dirname, {Object} stubs)***\n\n- **mdl**: path to the module to be tested e.g., `../lib/foo`\n- **test__dirname**: the `__dirname` of the module containing the tests\n- **stubs**: key/value pairs of the form `{ modulePath: stub, ... }`\n    - module paths are relative to the tested module **not** the test file \n    - therefore specify it exactly as in the require statement inside the tested file\n    - values themselves are key/value pairs of functions/properties and the appropriate override\n\n## Preventing call thru to original dependency\n\nBy default proxyquire calls the function defined on the *original* dependency whenever it is not found on the stub.\n\nIf you prefer a more strict behavior you can prevent *callThru* on a per module or global basis.\n\n**Prevent call thru on path stub:**\n\n```javascript\nvar foo = proxyquire.resolve('./foo', __dirname, {\n  path: { \n      extname: function (file) { ... } \n    , '@noCallThru': true\n  }\n});\n```\n\n**Prevent call thru for all future stubs:**\n\n```javascript\nproxyquire.noCallThru();\n```\n\n**Re-enable call thru for all future stubs:**\n\n```javascript\nproxyquire.noCallThru(false);\n```\n\n**Call thru config per module wins:**\n\n```javascript\nvar foo = proxyquire\n    .noCallThru()\n    .resolve('./foo', __dirname, {\n\n        // no calls to original './bar' methods will be made\n        './bar' : { toAtm: function (val) { ... } }\n\n        // for 'path' module they will be made\n      , path: { \n          extname: function (file) { ... } \n        , '@noCallThru': false\n        }\n    });\n```\n\n## Changing the TmpDir\n\n***proxyquire.tmpDir({string} tmpdir)***\n\nIn order to hook into your code, proxyquire writes some intermediate files into the tmp directory.\n\nBy default it will use the *TMPDIR* of your environment, but this method allows you to override it.\n\n## Examples\n\n**We are testing foo which depends on bar:**\n\n```javascript\n// bar.js module\nmodule.exports = { \n    toAtm: function (val) { return  0.986923267 * val; }\n};\n\n// foo.js module \n// requires bar which we will stub out in tests\nvar bar = require('./bar');\n[ ... ]\n\n```\n\n**Tests:**\n\n```javascript\n// foo-test.js module which is one folder below foo.js (e.g., in ./tests/)\n\n/*\n *   Option a) Resolve and override in one step:\n */\nvar foo = proxyquire.resolve('../foo', __dirname, {\n  './bar': { toAtm: function (val) { return 0; /* wonder what happens now */ } }\n});\n\n// [ .. run some tests .. ]\n\n/*\n *   Option b) Resolve with empty stub and add overrides later\n */\nvar barStub = { };\n\nvar foo =  proxyquire.resolve('../foo', __dirname, { './bar': barStub }); \n\n// Add override\nbar.toAtm = function (val) { return 0; /* wonder what happens now */ };\n\n[ .. run some tests .. ]\n\n// Change override\nbar.toAtm = function (val) { return -1 * val; /* or now */ };\n\n[ .. run some tests .. ]\n\n// Resolve foo and override multiple of its dependencies in one step - oh my!\nvar foo = proxyquire.resolve('./foo', __dirname, {\n    './bar' : { \n      toAtm: function (val) { return 0; /* wonder what happens now */ } \n    }\n  , path    : { \n      extname: function (file) { return 'exterminate the name of ' + file; } \n    }\n});\n```\n\n# More Examples\n\nFor more examples look inside the [examples folder](./proxyquire/tree/master/examples/) or\nlook through the [tests](./proxyquire/blob/master/test/proxyquire.js)\n\n**Specific Examples:**\n\n- test async APIs synchronously: [examples/async](./proxyquire/tree/master/examples/async).\n- using proxyquire with [Sinon.JS](http://sinonjs.org/): [examples/sinon](./proxyquire/tree/master/examples/sinon).\n\n",
  "_id": "proxyquire@0.3.2",
  "_from": "proxyquire"
}
